/*
    问题描述:
        实现一个基本的计算器来计算一个简单的字符串表达式的值。
        字符串表达式仅包含非负整数，+， - ，*，/ 四种运算符和空格  。 整数除法仅保留整数部分。

        示例 1:
            输入: "3+2*2"
            输出: 7

        示例 2:
            输入: " 3/2 "
            输出: 1

        示例 3:
            输入: " 3+5 / 2 "
            输出: 5

        说明：
            你可以假设所给定的表达式都是有效的。
            请不要使用内置的库函数 eval。

    问题分析:
        本题没有括号，只有考虑中缀表达式的加减乘除，
        在#224中我们知道， 中缀表达式是在遇到的数字的时候，开始进行计算操作，
        所以，计算只包含加减乘除的中缀表达式，我们可以用这样的想法:
            分为两个阶段:
                第一个阶段，预处理:
                    1. 减法变加法 ( 乘个-1 )
                    2. 乘除优先做
                第二个阶段, 做加法:
                    把预处理之后的元素，全部加起来，结果就是答案.
        
        假设pre为前一个操作符

        来看个例子:
            1 - 5 + 2 * 3 / 2
            ^                       1,  初始前一个符号是'+', 直接入栈  {} -> {1}
              ^                     -,  pre = '-'
                ^                   5,  前一个符号是'-', 乘个-1入栈, {1}->{1,-5}
                  ^                 +,  pre='+'
                    ^               2,  前一个符号是'+'， 直接入栈{1,-5,2}
                      ^             *,  pre='*'
                        ^           3， 前一个符号是'*', "栈顶*3"入栈, {1,-5,2}->{1,-5,6}
                          ^         /,  pre='/'
                            ^       2,  前一个符号是'/', “栈顶/2”入栈, {1,-5,6}->{1,-5,3}
        最终 结果里是{1,-5,3} 这三个元素都是 优先计算了 -,*,/,之后的结果
        +的优先级最低，放在最后做，最后把这些元素加起来就行了
        结果=1+(-5)+3 = -1
        
*/

class Solution {
public:
    int calculate(string s) {
        stack<int> st;
        char pre = '#';
        for ( int i=0; i<s.size(); ++i ){
            if ( s[i]<='9' && s[i]>='0' ){
                // 取出操作数
                int num=0;
                int j=i;
                while( j<s.size() && s[j]<='9' && s[j]>='0' )
                    num = num*10 + (s[j++]-'0');
                // 根据前一个符号来判断
                if ( pre=='+' ){
                    st.push(num);
                }else if ( pre=='-' ) st.push(-num);
                else if ( pre=='*' ){
                    int p = st.top() * num;
                    st.pop(); st.push(p);
                }else if ( pre=='/' ){
                    int p = st.top() / num;
                    st.pop(); st.push(p);
                }else st.push(num);
                i = j-1;
            }else if ( s[i]!=' ' ) pre = s[i];
        }
        int res= 0;
        // 累加
        while( st.size()>0 ){
            res += st.top();
            st.pop();
        }
        return res;
    }
};