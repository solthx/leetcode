/*
    问题描述：
        给定一个长度为 n 的整数数组 A 。
        假设 Bk 是数组 A 顺时针旋转 k 个位置后的数组，我们定义 A 的“旋转函数” F 为：
        F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1]。
        计算F(0), F(1), ..., F(n-1)中的最大值。

        注意:
            可以认为 n 的值小于 105。

        示例:
            A = [4, 3, 2, 6]

            F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25
            F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16
            F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23
            F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26

            所以 F(0), F(1), F(2), F(3) 中的最大值是 F(3) = 26 。

    问题分析：
        暴力会TLE，
        这里用到的类似sum求和的思想，
        系数没向右移动一次，对最终和的影响就是：
            1. 减去一次总和
            2. 加上0的位置的前一个位置的元素的n倍值

        例如：
        idx:    0 1 2 3   
        val:    5 7 1 9  

        移动一次：
        idx:    3 0 1 2
        val:    5 7 1 9
        可以发现，7 1 9都少了一倍，只有0的前一个位置增加了n-1倍，
        等价于每个元素都少了一倍，然后0的前一个位置增加了n倍
 */
class Solution {
public:
    int maxRotateFunction(vector<int>& A) {
        int len = A.size();
        long res=0;
        long F[len+1];
        long sums=0;
        memset(F,0,sizeof(F));
        for ( int i=0; i<len; ++i ){
            sums += A[i];
            F[0] += i*A[i]; 
        }
        res = F[0];
        for ( int i=1; i<len; ++i ){
            F[i] = F[i-1] - sums + (long)A[i-1] * len;  
            res = max(res, F[i]);
        }
        return (int)res;
    }
};
