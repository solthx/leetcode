/*
    问题描述:
        给定由一些正数（代表长度）组成的数组 A，返回由其中三个长度组成的、面积不为零的三角形的最大周长。
        如果不能形成任何面积不为零的三角形，返回 0。

        示例 1：
            输入：[2,1,2]
            输出：5
       
        示例 2：
            输入：[1,2,1]
            输出：0
        
        示例 3：
            输入：[3,2,3,4]
            输出：10
        
        示例 4：
            输入：[3,6,2,3]
            输出：8
        
        提示：
            3 <= A.length <= 10000
            1 <= A[i] <= 10^6

    问题描述:
        问题转换成: 
            有a, b, c,
            找出 满足: a+b>c, a+c>b, b+c>a 的 max{ a+b+c }
        
        从题目可以看出a,b,c的 变量无关性 的特点，
        
        因此，不失一般性， 对其进行排序，就可以得到一个天然的 a>b>c的 关系，

        这时， a+c>b, a+b>c恒满足， 
        
        所以问题就变成了 找a,b,c 使得 b+c>a 的 max{a+b+c}

        又因为数组递减， 对于A[i], 如果A[i+1]+A[i+2]<A[i], 那么之后的和也一定小于A[i]

        所以找出首个满足 A[i]<A[i+1]+A[i+2]的位置， 这三个边的和就是可以围成的最打周长了。
*/

class Solution {
public:
    int largestPerimeter(vector<int>& A) {
        sort( A.begin(), A.end(), [](int a, int b){
            return a>b;
        } );
        for ( int i=0; i<(int)A.size()-2; ++i )
            if ( A[i+1]+A[i+2]>A[i] ) 
                return A[i]+A[i+1]+A[i+2];
        
        return 0;
    }
};