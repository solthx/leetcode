/*
    问题描述：
        序列化二叉树的一种方法是使用前序遍历。当我们遇到一个非空节点时，我们可以记录下这个节点的值。如果它是一个空节点，我们可以使用一个标记值记录，例如 #。

                 _9_
                /   \
               3     2
              / \   / \
             4   1  #  6
            / \ / \   / \
            # # # #   # #
        
        例如，上面的二叉树可以被序列化为字符串 "9,3,4,#,#,1,#,#,2,#,6,#,#"，其中 # 代表一个空节点。

        给定一串以逗号分隔的序列，验证它是否是正确的二叉树的前序序列化。编写一个在不重构树的条件下的可行算法。

        每个以逗号分隔的字符或为一个整数或为一个表示 null 指针的 '#' 。

        你可以认为输入格式总是有效的，例如它永远不会包含两个连续的逗号，比如 "1,,3" 。

        示例 1:

        输入: "9,3,4,#,#,1,#,#,2,#,6,#,#"
        输出: true
        示例 2:

        输入: "1,#"
        输出: false
        示例 3:

        输入: "9,#,#,1"
        输出: false


    问题分析:
        可以引入一个位置的概念，

        每个位置上可以放一个节点， 看能否在位置数大于等于0的情况下，正好放完所有节点

        空节点#和非空节点，都需要占一个位子，

        所以进来一个节点，位置都要少一个，

        每进来一个非空节点，就会多两个位置(左右空节点嘛)

        因此，照着个规则下去就是:
            for i from 1 to n:
                pos--
                if pos<0  return false
                if node != '#' pos += 2
            return node == 0
        pos表示剩余的空位子数， 如果中途空位子数小于0了， 则说明不符合，
        如果最后还有多余的空位子数，依然不符合。

        因为最开始要留一个空位子 来放最初的节点， 所以pos的初始值为1 
*/

class Solution {
public:
    bool isValidSerialization(string preorder) {
        int idx=0;
        vector<char> ps;
        char t = 'd';
        for ( auto c:preorder ){
            if ( c==',' ){
                ps.push_back( t );
            }else t = c;
        }
        ps.push_back(t);
        int null_node = 1;
        for ( auto c:ps ){
            --null_node;
            if ( null_node < 0 ) return false;
            if ( c!='#' ) null_node += 2;
        }
        return null_node==0;
    }
};