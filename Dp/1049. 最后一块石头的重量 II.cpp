/*
    问题描述:
        有一堆石头，每块石头的重量都是正整数。
        每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x <= y。那么粉碎的可能结果如下：
        如果 x == y，那么两块石头都会被完全粉碎；
        如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。
        最后，最多只会剩下一块石头。返回此石头最小的可能重量。如果没有石头剩下，就返回 0。

        示例：
            输入：[2,7,4,1,8,1]
            输出：1
            解释：
            组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]，
            组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]，
            组合 2 和 1，得到 1，所以数组转化为 [1,1,1]，
            组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。

    问题分析:
        #邮票分你一半 的包装题。
        从石子中任意取出多个石头，使得取出石头的总个数K为 <= sums/2的最大个数，
        然后用 sums - 2*K 就是剩下的最小可能重量。
*/

class Solution {
public:
    int lastStoneWeightII(vector<int>& stones) {
        //邮票分你一半
        //将集合分成两堆
        int sums = accumulate(stones.begin(), stones.end(),0);
        int N = sums/2;
        vector<int> dp( N+1, 0 );
        dp[0] =1;
        for ( int i=1; i<=stones.size(); ++i ){
            for ( int j=N; j>=stones[i-1]; --j ){
                if (dp[j-stones[i-1]]==1)  // 表示j可以取到
                    dp[j] = 1;
            }
        }
        int t=0;
        for ( int j=N; j>=0; --j )
            // t为 小于等于sums/2 的最大值
            if ( dp[j]!=0 ){
                t = j;
                break;
            }
        return sums - 2*t;
    }
};